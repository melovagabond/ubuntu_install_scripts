- name: add apt repositories
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_lines: cat "{{ app_repos_list }}"
  become: true

- name: update apt packages
  apt:
        name: "*"
        state: "latest"
        autoclean: true
        autoremove: true
        update_cache: true
  become: true

- name: install apt packages
  apt:
        name: "{{ item }}"
        state: present
  with_lines: cat "{{ list_of_packages }}"
  register: apt_action
  retries: 100
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)
  become: true

- name: create Apps and Projects folder in home
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - ~/Apps
    - ~/Projects
    - ~/Apps/Tools

- name: Make all .sh files executable
  shell: sh -c "chmod +x {{ files }}/*.sh"
  become: true

###
# OH-MY-ZSH INSTALLATION
###

- name: Check if Oh My Zsh is already installed
  stat:
    path: ~/.oh-my-zsh
  register: ohmyzsh_installed

- name: Install Oh My ZSH
  shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  args:
    executable: /bin/bash
  when: not ohmyzsh_installed.stat.exists

- name: Download ZSH Auto Suggestions
  get_url:
    url: https://raw.githubusercontent.com/zsh-users/zsh-autosuggestions/master/zsh-autosuggestions.zsh
    dest: ~/.oh-my-zsh/custom/zsh-autosuggestions.zsh
    mode: '0644'
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Copy Oh My ZSH Aliases
  copy:
    src: ../files/aliases.zsh
    dest: ~/.oh-my-zsh/custom/aliases.zsh
    mode: '0644'
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Copy Parrot Theme
  copy:
    src: ../files/parrot.zsh-theme
    dest: ~/.oh-my-zsh/themes/parrot.zsh-theme
    mode: '0644'
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Copy Auto Suggest Plugin
  copy:
    src: ../files/zsh-autosuggestions.zsh
    dest: ~/.oh-my-zsh/custom/zsh-autosuggestions.zsh
    mode: '0644'
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Update .zshrc to use parrot theme
  lineinfile:
    path: ~/.zshrc
    regexp: '^ZSH_THEME='
    line: 'ZSH_THEME="parrot"'
    backup: yes
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Add autosuggestions to .zshrc
  lineinfile:
    path: ~/.zshrc
    line: 'source ~/.oh-my-zsh/custom/zsh-autosuggestions.zsh'
    insertafter: EOF
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

- name: Change default shell to zsh
  user:
    name: "{{ ansible_user_id }}"
    shell: /usr/bin/zsh
  become: true
  when: ohmyzsh_installed.stat.exists or not ohmyzsh_installed.stat.exists

###
# DOCKER INSTALLATION
###

- name: Install Docker CE
  shell: "{{ docker_install }}"
  args:
        executable: /bin/bash
  become: true

###
# ADDITIONAL APPLICATIONS
###

- name: Install additional applications (VSCode, Pi Imager, Obsidian)
  shell: "{{ additional_apps }}"
  args:
        executable: /bin/bash

###
# KUBERNETES TOOLS
###

- name: Check if kubectl is already installed
  command: which kubectl
  register: kubectl_check
  ignore_errors: true

- name: Install kubectl
  shell: |
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    rm kubectl
  args:
        executable: /bin/bash
  when: kubectl_check.rc != 0

###
# HASHICORP TOOLS
###

- name: Install Vagrant and Terraform (latest)
  shell: "{{ hashi }}"
  args:
        executable: /bin/bash
  become: true

###
# GRAPHICS AND WINE
###

- name: Make changes for graphics card
  shell: "{{ graphics_card }}"
  args:
        executable: /bin/bash
  become: true

- name: Install Wine
  shell: "{{ wine }}"
  args:
        executable: /bin/bash
  become: true
  ignore_errors: true

###
# DEVELOPMENT TOOLS
###

- name: Download SuperSlicer to app folder
  get_url:
    url: https://github.com/supermerill/SuperSlicer/releases/download/2.3.56.9/SuperSlicer-ubuntu_18.04-2.3.56.9.AppImage
    dest: ~/Apps/SuperSlicer.AppImage
    mode: '0755'
  ignore_errors: true

- name: Clone Git repos
  git:
    repo: "{{ item.split()[0] }}"
    dest: "~/Apps/Tools/{{ item.split()[1] if item.split()|length > 1 else item.split()[0].split('/')[-1].replace('.git', '') }}"
  with_lines: cat "{{ git_repos }}"
  ignore_errors: true

###
# PYTHON REQUIREMENTS
###

- name: Upgrade pip to latest version
  pip:
    name: pip
    state: latest
    executable: pip3

- name: Install specified python requirements
  pip:
    requirements: "{{ pip_requirements }}"
    executable: pip3

###
# GESTURE SUPPORT (OPTIONAL)
###

- name: Install gesture support
  shell: "{{ gestures_install }}"
  args:
        executable: /bin/bash
  ignore_errors: true
  when: gestures_install is defined

###
# SYSTEM CONFIGURATION
###

- name: Add user to important groups
  user:
    name: "{{ ansible_user_id }}"
    groups: "{{ item }}"
    append: yes
  become: true
  loop:
    - docker
    - sudo
    - plugdev
    - dialout
  ignore_errors: true

- name: Enable important services
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  become: true
  loop:
    - docker
    - ssh
  ignore_errors: true

###
# POST-INSTALLATION CLEANUP
###

- name: Clean up package cache
  apt:
    autoclean: yes
    autoremove: yes
  become: true

- name: Update locate database
  shell: sudo updatedb
  ignore_errors: true

###
# FINAL INSTALLATION SUMMARY
###

- name: Display installation summary
  debug:
    msg: |
      ========================================
      üéâ INSTALLATION COMPLETE! üéâ
      ========================================
      
      ‚úÖ APPLICATIONS INSTALLED:
      ‚Ä¢ Visual Studio Code
      ‚Ä¢ Docker CE + Docker Compose  
      ‚Ä¢ Kubernetes kubectl
      ‚Ä¢ Raspberry Pi Imager
      ‚Ä¢ Obsidian (~/Apps/Obsidian.AppImage)
      ‚Ä¢ Python 3.11+ with pip
      ‚Ä¢ Filezilla
      ‚Ä¢ Wine + Windows app support
      ‚Ä¢ HashiCorp Tools (Terraform, Vagrant)
      ‚Ä¢ Security Tools (Nmap, Wireshark, etc.)
      ‚Ä¢ Development Tools & Libraries
      
      ‚úÖ SHELL CONFIGURATION:
      ‚Ä¢ Oh My Zsh with Parrot theme
      ‚Ä¢ Custom aliases and functions
      ‚Ä¢ Auto-suggestions enabled
      ‚Ä¢ Default shell changed to Zsh
      
      ‚úÖ DIRECTORIES CREATED:
      ‚Ä¢ ~/Apps (for AppImages and tools)
      ‚Ä¢ ~/Projects (for your projects)
      ‚Ä¢ ~/Apps/Tools (security tools cloned)
      
      ‚ö†Ô∏è  IMPORTANT NEXT STEPS:
      1. LOG OUT and LOG BACK IN for:
         - Shell changes (Zsh)
         - Docker group permissions
         - All group membership changes
      
      2. REBOOT RECOMMENDED for:
         - Graphics driver changes
         - Kernel module updates
         - Complete system integration
      
      3. TEST YOUR SETUP:
         - Open terminal (should show Zsh with Parrot theme)
         - Run: docker --version
         - Run: kubectl version --client
         - Run: code --version
      
      üõ°Ô∏è  SECURITY TOOLS:
      Located in ~/Apps/Tools/ - Use responsibly!
      
      üìö DOCUMENTATION:
      Check the repository README for detailed usage info
      
      ========================================
      Happy coding! üöÄ
      ========================================